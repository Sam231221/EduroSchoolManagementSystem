# Generated by Django 4.0.3 on 2024-02-06 06:40

import ckeditor_uploader.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('MAuthentication', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentsManager',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('MAuthentication.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Others')], max_length=10)),
                ('date_of_birth', models.DateField()),
                ('roll', models.CharField(blank=True, max_length=20, null=True)),
                ('blood_group', models.CharField(choices=[('B+', 'B+'), ('A+', 'A+'), ('O+', 'O+'), ('Others', 'Others')], max_length=6)),
                ('religion', models.CharField(choices=[('Hindu', 'Hindu'), ('Christian', 'Christian'), ('Others', 'Others')], max_length=20)),
                ('section', models.CharField(max_length=5)),
                ('admission_id', models.CharField(blank=True, max_length=20, null=True)),
                ('parent_name', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('photo', models.ImageField(blank=True, null=True, upload_to='student_photos/')),
                ('class_no', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], default=1)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(related_name='student_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='student_set', to='auth.permission')),
            ],
            options={
                'ordering': ('class_no', 'section'),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EducationalInstitution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('thumbnail', models.CharField(default='', max_length=255)),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(null=True)),
                ('address', models.TextField(default='')),
                ('type', models.CharField(default='', max_length=255)),
                ('category', models.CharField(default='', max_length=255)),
                ('accreditation_status', models.CharField(default='', max_length=255)),
                ('principal_name', models.CharField(default='', max_length=255)),
                ('principal_email', models.EmailField(default='', max_length=254, unique=True)),
                ('principal_phone_number', models.CharField(default='', max_length=20)),
                ('files', models.ImageField(blank=True, help_text='Only .pdf are accepted', null=True, upload_to='eis/files/%y', validators=[django.core.validators.FileExtensionValidator('.pdf')])),
                ('owner', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
